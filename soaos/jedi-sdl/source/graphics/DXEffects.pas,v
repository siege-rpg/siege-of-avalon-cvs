head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2005.05.03.20.58.46;	author savage;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.30.14.00.00;	author savage;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.15.20.16.59;	author savage;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fixes so that it compiles with FreePascal.
@
text
@unit DXEffects;
{******************************************************************************}
{                                                                              }
{               Siege Of Avalon : Open Source Edition                          }
{               -------------------------------------                          }
{                                                                              }
{ Portions created by Digital Tome L.P. Texas USA are                          }
{ Copyright ©1999-2000 Digital Tome L.P. Texas USA                             }
{ All Rights Reserved.                                                         }
{                                                                              }
{ Portions created by Team SOAOS are                                           }
{ Copyright (C) 2003 - Team SOAOS.                                             }
{                                                                              }
{                                                                              }
{ Contributor(s)                                                               }
{ --------------                                                               }
{ Dominique Louis <Dominique@@SavageSoftware.com.au>                            }
{                                                                              }
{                                                                              }
{                                                                              }
{ You may retrieve the latest version of this file at the SOAOS project page : }
{   http://www.sourceforge.com/projects/soaos                                  }
{                                                                              }
{ The contents of this file maybe used with permission, subject to             }
{ the GNU Lesser General Public License Version 2.1 (the "License"); you may   }
{ not use this file except in compliance with the License. You may             }
{ obtain a copy of the License at                                              }
{ http://www.opensource.org/licenses/lgpl-license.php                          }
{                                                                              }
{ Software distributed under the License is distributed on an                  }
{ "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or               }
{ implied. See the License for the specific language governing                 }
{ rights and limitations under the License.                                    }
{                                                                              }
{ Description                                                                  }
{ -----------                                                                  }
{                                                                              }
{                                                                              }
{                                                                              }
{                                                                              }
{                                                                              }
{                                                                              }
{                                                                              }
{ Requires                                                                     }
{ --------                                                                     }
{   DirectX Runtime libraris on Win32                                          }
{   They are available from...                                                 }
{   http://www.microsoft.com.                                                  }
{                                                                              }
{ Programming Notes                                                            }
{ -----------------                                                            }
{                                                                              }
{                                                                              }
{                                                                              }
{                                                                              }
{ Revision History                                                             }
{ ----------------                                                             }
{   July    13 2003 - DL : Initial Upload to CVS                               }
{                                                                              }
{******************************************************************************}

interface

uses
  sdl;

procedure DrawAdd( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );

procedure DrawAlpha( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );

procedure DrawMult( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );

procedure DrawSub( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );

procedure DrawInvSub( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );

procedure FillRectAdd( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color );

procedure FillRectAlpha( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color;
  Alpha : Integer );

procedure FillRectSub( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color );

implementation

uses
  sdlutils;

procedure DrawAdd( Dest : PSDL_Surface; const DestRect, SrcRect : TRect;  Source: PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );
const
  FailName : string = 'DXEffects.DrawAdd';
var
  SDLSrcRect, SDLDestRect : TSDL_Rect;
begin
  SDLSrcRect.x := SrcRect.Left;
  SDLSrcRect.y := SrcRect.Top;
  SDLSrcRect.w := SrcRect.Right - SrcRect.Left ;
  SDLSrcRect.h := SrcRect.Bottom - SrcRect.Top;

  SDLDestRect.x := DestRect.Left;
  SDLDestRect.y := DestRect.Top;
  SDLDestRect.w := DestRect.Right - DestRect.Left;
  SDLDestRect.h := DestRect.Bottom - DestRect.Top;

  SDL_AddSurface( Source, @@SDLSrcRect, Dest, @@SDLDestRect );
end;

procedure DrawAlpha( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );
const
  FailName : string = 'DXEffects.DrawAlpha';
{var
  Src_ddsd : TDDSURFACEDESC;
  DestSurface, SrcSurface : TDXR_Surface;
  Blend : TDXR_Blend; }
begin
  SDL_SetAlpha( Source, 0, Alpha );
  {if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      if dxrDDSurfaceLock2( Source, Src_ddsd, SrcSurface ) then
      begin
        try
          if DestSurface.ColorType = DXR_COLORTYPE_INDEXED then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else if Alpha >= 255 then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else
          begin
            Blend := DXR_BLEND_SRCALPHA1_ADD_INVSRCALPHA2;
          end;

          dxrCopyRectBlend( DestSurface, SrcSurface,
            DestRect, SrcRect, Blend, Alpha, TRANSPARENT, Src_ddsd.ddckCKSrcBlt.dwColorSpaceLowValue );
        finally
          dxrDDSurfaceUnLock( Source, SrcSurface )
        end;
      end;
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end;}
end;

procedure DrawMult( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );
const
  FailName : string = 'DXEffects.DrawMult';
{var
  Src_ddsd : TDDSURFACEDESC;
  DestSurface, SrcSurface : TDXR_Surface;
  Blend : TDXR_Blend; }
begin
  {if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      if dxrDDSurfaceLock2( Source, Src_ddsd, SrcSurface ) then
      begin
        try
          if DestSurface.ColorType = DXR_COLORTYPE_INDEXED then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else if Alpha >= 255 then
          begin
            Blend := DXR_BLEND_MODULATE;
          end
          else
          begin
            Blend := DXR_BLEND_MODULATEALPHA;
          end;

          dxrCopyRectBlend( DestSurface, SrcSurface,
            DestRect, SrcRect, Blend, Alpha, TRANSPARENT, Src_ddsd.ddckCKSrcBlt.dwColorSpaceLowValue );
        finally
          dxrDDSurfaceUnLock( Source, SrcSurface )
        end;
      end;
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end; }
end;

procedure DrawSub( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );
const
  FailName : string = 'DXEffects.DrawSub';
var
  SDLSrcRect, SDLDestRect : TSDL_Rect;
begin
  SDLSrcRect.x := SrcRect.Left;
  SDLSrcRect.y := SrcRect.Top;
  SDLSrcRect.w := SrcRect.Right - SrcRect.Left ;
  SDLSrcRect.h := SrcRect.Bottom - SrcRect.Top;

  SDLDestRect.x := DestRect.Left;
  SDLDestRect.y := DestRect.Top;
  SDLDestRect.w := DestRect.Right - DestRect.Left;
  SDLDestRect.h := DestRect.Bottom - DestRect.Top;

  SDL_SubSurface( Source, @@SDLSrcRect, Dest, @@SDLDestRect );
end;

procedure DrawInvSub( Dest : PSDL_Surface; const DestRect, SrcRect : TRect; Source : PSDL_Surface;
  TRANSPARENT : Boolean; Alpha : Integer );
const
  FailName : string = 'DXEffects.DrawInvSub';
{var
  Src_ddsd : TDDSURFACEDESC;
  DestSurface, SrcSurface : TDXR_Surface;
  Blend : TDXR_Blend;}
begin
  {if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      if dxrDDSurfaceLock2( Source, Src_ddsd, SrcSurface ) then
      begin
        try
          if DestSurface.ColorType = DXR_COLORTYPE_INDEXED then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else if Alpha >= 255 then
          begin
            Blend := DXR_BLEND_ONE1_SUB_ONE2;
          end
          else
          begin
            Blend := DXR_BLEND_ONE2_SUB_SRCALPHA1; //Not currently supported
          end;

          dxrCopyRectBlend( DestSurface, SrcSurface,
            DestRect, SrcRect, Blend, Alpha, TRANSPARENT, Src_ddsd.ddckCKSrcBlt.dwColorSpaceLowValue );
        finally
          dxrDDSurfaceUnLock( Source, SrcSurface )
        end;
      end;
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end; }
end;

procedure FillRectAdd( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color );
const
  FailName : string = 'DXEffects.FillRectAdd';
{var
  DestSurface : TDXR_Surface; }
begin
 { if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      dxrFillRecTSDL_ColorBlend( DestSurface, DestRect, DXR_BLEND_ONE1_ADD_ONE2, ColorToRGB( RGBCol ) );
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end;}
end;

procedure FillRectAlpha( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color;
  Alpha : Integer );
const
  FailName : string = 'DXEffects.FillRectAlpha';
{var
  DestSurface : TDXR_Surface; }
begin
  {if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      dxrFillRecTSDL_ColorBlend( DestSurface, DestRect, DXR_BLEND_SRCALPHA1_ADD_INVSRCALPHA2, ColorToRGB( RGBCol ) or ( Byte( Alpha ) shl 24 ) );
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end;}
end;

procedure FillRectSub( Dest : PSDL_Surface; const DestRect : TRect; RGBCol : TSDL_Color );
const
  FailName : string = 'DXEffects.FillRectSub';
{var
  DestSurface : TDXR_Surface; }
begin
  {if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      dxrFillRectBlend( DestSurface, DestRect, DXR_BLEND_ONE2_SUB_ONE1, ColorToRGB( RGBCol ) );
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end; }
end;

end.

@


1.2
log
@Latest code changes
@
text
@d65 1
a65 2
  sdl,
  DXRender;
@


1.1
log
@Initial Upload : Updated to Make use of DirectX 7 headers, but also still comiles with DirectX 5 ( original ) header.
The main things Steven changed (if he remembers correctly) were:
1) Allows you to play through the game as a female, or a monkey, or...
2) Video memory is enabled and working properly
3) The top level fireball spell (Inferno I think) now has two fireballs spinning around each other
4) The notorious "Bikini" mode has been enabled
@
text
@d65 2
a66 8
  Windows,
{$IFDEF DX5}
  DirectX,
{$ELSE}
  DirectDraw,
{$ENDIF}
  DXRender,
  Graphics;
d68 1
a68 1
procedure DrawAdd( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d71 1
a71 1
procedure DrawAlpha( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d74 1
a74 1
procedure DrawMult( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d77 1
a77 1
procedure DrawSub( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d80 1
a80 1
procedure DrawInvSub( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d83 1
a83 1
procedure FillRectAdd( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor );
d85 1
a85 1
procedure FillRectAlpha( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor;
d88 1
a88 1
procedure FillRectSub( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor );
d92 4
a95 1
procedure DrawAdd( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d100 1
a100 3
  Src_ddsd : TDDSURFACEDESC;
  DestSurface, SrcSurface : TDXR_Surface;
  Blend : TDXR_Blend;
d102 9
a110 18
  if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      if dxrDDSurfaceLock2( Source, Src_ddsd, SrcSurface ) then
      begin
        try
          if DestSurface.ColorType = DXR_COLORTYPE_INDEXED then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else if Alpha >= 255 then
          begin
            Blend := DXR_BLEND_ONE1_ADD_ONE2;
          end
          else
          begin
            Blend := DXR_BLEND_SRCALPHA1_ADD_ONE2;
          end;
d112 1
a112 10
          dxrCopyRectBlend( DestSurface, SrcSurface,
            DestRect, SrcRect, Blend, Alpha, TRANSPARENT, Src_ddsd.ddckCKSrcBlt.dwColorSpaceLowValue );
        finally
          dxrDDSurfaceUnLock( Source, SrcSurface )
        end;
      end;
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end;
d115 1
a115 1
procedure DrawAlpha( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d119 1
a119 1
var
d122 1
a122 1
  Blend : TDXR_Blend;
d124 2
a125 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d153 1
a153 1
  end;
d156 1
a156 1
procedure DrawMult( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d160 1
a160 1
var
d163 1
a163 1
  Blend : TDXR_Blend;
d165 1
a165 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d193 1
a193 1
  end;
d196 1
a196 1
procedure DrawSub( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d201 1
a201 3
  Src_ddsd : TDDSURFACEDESC;
  DestSurface, SrcSurface : TDXR_Surface;
  Blend : TDXR_Blend;
d203 9
a211 18
  if dxrDDSurfaceLock( Dest, DestSurface ) then
  begin
    try
      if dxrDDSurfaceLock2( Source, Src_ddsd, SrcSurface ) then
      begin
        try
          if DestSurface.ColorType = DXR_COLORTYPE_INDEXED then
          begin
            Blend := DXR_BLEND_ONE1;
          end
          else if Alpha >= 255 then
          begin
            Blend := DXR_BLEND_ONE2_SUB_ONE1;
          end
          else
          begin
            Blend := DXR_BLEND_ONE2_SUB_SRCALPHA1;
          end;
d213 1
a213 10
          dxrCopyRectBlend( DestSurface, SrcSurface,
            DestRect, SrcRect, Blend, Alpha, TRANSPARENT, Src_ddsd.ddckCKSrcBlt.dwColorSpaceLowValue );
        finally
          dxrDDSurfaceUnLock( Source, SrcSurface )
        end;
      end;
    finally
      dxrDDSurfaceUnLock( Dest, DestSurface )
    end;
  end;
d216 1
a216 1
procedure DrawInvSub( Dest : IDirectDrawSurface; const DestRect, SrcRect : TRect; Source : IDirectDrawSurface;
d220 1
a220 1
var
d223 1
a223 1
  Blend : TDXR_Blend;
d225 1
a225 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d253 1
a253 1
  end;
d256 1
a256 1
procedure FillRectAdd( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor );
d259 2
a260 2
var
  DestSurface : TDXR_Surface;
d262 1
a262 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d265 1
a265 1
      dxrFillRectColorBlend( DestSurface, DestRect, DXR_BLEND_ONE1_ADD_ONE2, ColorToRGB( RGBCol ) );
d269 1
a269 1
  end;
d272 1
a272 1
procedure FillRectAlpha( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor;
d276 2
a277 2
var
  DestSurface : TDXR_Surface;
d279 1
a279 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d282 1
a282 1
      dxrFillRectColorBlend( DestSurface, DestRect, DXR_BLEND_SRCALPHA1_ADD_INVSRCALPHA2, ColorToRGB( RGBCol ) or ( Byte( Alpha ) shl 24 ) );
d286 1
a286 1
  end;
d289 1
a289 1
procedure FillRectSub( Dest : IDirectDrawSurface; const DestRect : TRect; RGBCol : TColor );
d292 2
a293 2
var
  DestSurface : TDXR_Surface;
d295 1
a295 1
  if dxrDDSurfaceLock( Dest, DestSurface ) then
d298 1
a298 1
      dxrFillRectColorBlend( DestSurface, DestRect, DXR_BLEND_ONE2_SUB_ONE1, ColorToRGB( RGBCol ) );
d302 1
a302 1
  end;
@

